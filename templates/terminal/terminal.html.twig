{% extends 'base.html.twig' %}

{% block body %}
<style>
body {
  background: #0a0f0a;
  min-height: 100vh;
  margin: 0;
  font-family: 'VT323', 'Share Tech Mono', 'Fira Mono', 'Consolas', monospace;
}
#terminal-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
}
#terminal {
  background: #101c10;
  color: #00ff66;
  padding: 24px 32px 16px 32px;
  font-family: inherit;
  min-width: 350px;
  max-width: 600px;
  min-height: 260px;
  border-radius: 10px;
  box-shadow: 0 0 32px 4px #0f0, 0 0 0 4px #030;
  border: 2px solid #0f0;
  position: relative;
  overflow: hidden;
  image-rendering: pixelated;
}
#output {
  min-height: 180px;
  max-height: 260px;
  overflow-y: auto;
  font-size: 1.18em;
  line-height: 1.5;
  margin-bottom: 10px;
  z-index: 1;
  color: #00ff66;
  text-shadow: 0 0 2px #0f0, 0 0 8px #030;
  letter-spacing: 0.04em;
}
#terminal-prompt {
  display: flex;
  align-items: center;
  z-index: 1;
}
#terminal-prompt span {
  color: #00ff66;
  font-weight: bold;
  font-size: 1.1em;
  margin-right: 4px;
  text-shadow: 0 0 2px #0f0, 0 0 8px #030;
}
#input {
  background: transparent;
  color: #00ff66;
  border: none;
  outline: none;
  width: 80%;
  font-size: 1.18em;
  font-family: inherit;
  caret-color: #00ff66;
  text-shadow: 0 0 2px #0f0, 0 0 8px #030;
  letter-spacing: 0.04em;
}
#input::placeholder {
  color: #00ff66;
  opacity: 0.4;
}
.terminal-title {
  font-family: 'VT323', 'Share Tech Mono', monospace;
  color: #00ff66;
  font-size: 2.1em;
  letter-spacing: 0.08em;
  text-align: center;
  margin-bottom: 10px;
  text-shadow: 0 0 8px #0f0, 0 0 24px #030;
  filter: contrast(1.2) brightness(1.1);
}
#terminal, #output, #input, .terminal-title {
  image-rendering: pixelated;
}
.scanlines {
  pointer-events: none;
  position: fixed;
  left: 0; top: 0; width: 100vw; height: 100vh;
  z-index: 100;
  mix-blend-mode: overlay;
  opacity: 0.18;
  background: repeating-linear-gradient(
    to bottom,
    transparent 0px,
    rgba(0,0,0,0.18) 1px,
    transparent 2px,
    transparent 4px
  );
}
@keyframes blink {
  0%, 49% { opacity: 1; }
  50%, 100% { opacity: 0; }
}
.blink {
  animation: blink 1s steps(1) infinite;
}
@media (max-width: 600px) {
  #terminal {
    min-width: 0;
    width: 98vw;
    padding: 10px 2vw 10px 2vw;
  }
}
</style>
<link href="https://fonts.googleapis.com/css2?family=VT323&display=swap" rel="stylesheet">
<div class="scanlines"></div>
<div id="terminal-container">
  <div class="terminal-title">Serveur Hawkins</div>
  <div id="terminal">
    <div id="output"></div>
    <div id="terminal-prompt">
      <span class="blink">&gt;</span><input id="input" autocomplete="off" placeholder="Tapez une commande..." autofocus>
    </div>
  </div>
</div>
<script>
const fs = {
  "lab": {
    "lab_notes.txt": "Journal du Dr. Owens : Activité étrange détectée dans le laboratoire. Code partiel : 19--.",
    "creatures.log": "Observation : Démogorgon aperçu dans le couloir 3. Code partiel : ---5."
  },
  "project_mk_ultra.txt": "Dossier secret : Expériences sur le contrôle mental. Code partiel : --7-.",
  "readme.txt": "Bienvenue sur le serveur Hawkins. Trouvez le code secret en explorant les fichiers. Commandes disponibles : ls, cd, cat, help."
};
let cwd = [];
function getDir() {
  return cwd.reduce((dir, name) => dir[name], fs);
}
function ls() {
  const dir = getDir();
  return Object.keys(dir).join('  ');
}
function cd(arg) {
  if (!arg) return "Utilisation : cd <dossier>";
  if (arg === "..") { cwd.pop(); return; }
  const dir = getDir();
  if (dir[arg] && typeof dir[arg] === "object") cwd.push(arg);
  else return "Dossier introuvable";
}
function cat(arg) {
  if (!arg) return "Utilisation : cat <fichier>";
  const dir = getDir();
  if (dir[arg] && typeof dir[arg] === "string") return dir[arg];
  else return "Fichier introuvable";
}
function help() {
  return "Commandes : ls, cd <dossier>, cat <fichier>, help, clear, exit";
}
function handle(cmd) {
  const [c, ...args] = cmd.trim().split(" ");
  if (c === "ls") return ls();
  if (c === "cd") return cd(args[0]) || "";
  if (c === "cat") return cat(args[0]);
  if (c === "help") return help();
  if (c === "clear") {
    output.innerHTML = "";
    return null;
  }
  if (c === "exit") {
    window.location.href = "/laboratoire";
    return null;
  }
  return "Commande inconnue";
}
const output = document.getElementById("output");
const input = document.getElementById("input");
let history = [];
let historyIndex = -1;
function print(text) {
  output.innerHTML += text + "<br>";
  output.scrollTop = output.scrollHeight;
}
const typeSound = new Audio('/sounds/keyboard-click.mp3'); // Remplacez par un son court de frappe si besoin
input.addEventListener("keydown", function(e) {
  if (e.key.length === 1 && !e.ctrlKey && !e.metaKey && !e.altKey) {
    try { typeSound.currentTime = 0; typeSound.play(); } catch(e){}
  }
  if (e.key === "Enter") {
    const cmd = input.value;
    if (cmd.trim() !== "") {
      history.push(cmd);
      historyIndex = history.length;
    }
    print("&gt; " + cmd);
    const res = handle(cmd);
    if (res) print(res);
    input.value = "";
  } else if (e.key === "ArrowUp") {
    if (history.length > 0 && historyIndex > 0) {
      historyIndex--;
      input.value = history[historyIndex];
      setTimeout(() => input.setSelectionRange(input.value.length, input.value.length), 0);
    }
    e.preventDefault();
  } else if (e.key === "ArrowDown") {
    if (history.length > 0 && historyIndex < history.length - 1) {
      historyIndex++;
      input.value = history[historyIndex];
    } else if (historyIndex === history.length - 1) {
      historyIndex++;
      input.value = "";
    }
    e.preventDefault();
  } else if (e.key === "Tab") {
    e.preventDefault();
    const val = input.value;
    const [cmd, ...args] = val.trim().split(/\s+/);
    const commands = ["ls", "cd", "cat", "help", "exit"];
    if (!cmd || (val.endsWith(' ') && (cmd === 'cd' || cmd === 'cat'))) {
      // Suggest file/dir after space
      const dir = getDir();
      const entries = Object.keys(dir);
      const partial = args[args.length-1] || '';
      const matches = entries.filter(x => x.startsWith(partial));
      if (matches.length === 1) {
        input.value = val + matches[0].slice(partial.length);
      } else if (matches.length > 1) {
        print(matches.join('  '));
      }
    } else if (args.length === 0) {
      // Autocomplete command
      const matches = commands.filter(c => c.startsWith(cmd));
      if (matches.length === 1) {
        input.value = matches[0] + ' ';
      } else if (matches.length > 1) {
        print(matches.join('  '));
      }
    } else if (cmd === 'cd' || cmd === 'cat') {
      // Autocomplete file/dir for cd/cat
      const dir = getDir();
      const entries = Object.keys(dir);
      const partial = args[0] || '';
      const matches = entries.filter(x => x.startsWith(partial));
      if (matches.length === 1) {
        input.value = cmd + ' ' + matches[0];
      } else if (matches.length > 1) {
        print(matches.join('  '));
      }
    }
  }
});
print("<span style='color:#00ff66'>Serveur Hawkins v1.0</span><br><span style='color:#00ff66'>Tapez 'help' pour la liste des commandes.</span>");
</script>
{% endblock %}
